
Explicación del código PlayerController.cs
-------------------------------------------

Este script controla el movimiento y el dash (rodar rápido) del jugador en Unity.

1. Variables principales
   - `speed`: velocidad de movimiento normal del personaje.
   - `dashDistance`: distancia que recorre el personaje al hacer dash.
   - `dashDuration`: tiempo que tarda en completarse el dash.
   - `dashCooldown`: tiempo de espera antes de poder hacer otro dash.
   - `anim`: referencia al componente Animator para manejar animaciones.

2. Variables internas
   - `isDashing`: indica si el jugador está haciendo un dash actualmente (bloquea movimiento normal).
   - `canDash`: controla si el dash está disponible o si está en enfriamiento.
   - `moveInput`: vector que guarda la dirección actual del movimiento.
   - `lastDirection`: almacena la última dirección en la que el jugador se movió, útil cuando hace dash sin moverse.

3. Método Start()
   - Obtiene el componente Animator del objeto para poder activar animaciones.

4. Método Update()
   - Si el jugador está dashing (`isDashing == true`), se cancela el resto del código para evitar que se mueva durante el dash.
   - Se leen las teclas WASD o flechas (`Input.GetAxisRaw("Horizontal")` y `("Vertical")`) para determinar la dirección de movimiento.
   - Se normaliza el vector para que no sea más rápido en diagonal.
   - Se actualiza la posición del jugador multiplicando la dirección por la velocidad y el tiempo (`Time.deltaTime`).
   - Se activan animaciones según el movimiento:
       - Si se mueve, `isMoving` se activa y se guarda la última dirección.
       - Si está quieto, `isMoving` se desactiva.
   - Se voltea el sprite según la dirección horizontal (izquierda/derecha) ajustando `transform.localScale.x`.
   - Si el jugador presiona **ESPACIO** y puede hacer dash (`canDash == true`), se inicia la corrutina `Dash()`.

5. Corrutina Dash()
   - Marca `isDashing = true` y `canDash = false` para evitar movimientos o dashes dobles.
   - Activa la animación de rodar (`anim.SetTrigger("roll")`).
   - Determina la dirección del dash:
       - Si el jugador está quieto, usa la última dirección registrada.
       - Si se está moviendo, usa la dirección actual.
   - Calcula la posición inicial (`startPos`) y final (`targetPos`) del dash.
   - Usa un bucle `while` con `Vector3.Lerp()` para mover suavemente al jugador desde la posición inicial hasta la final durante el tiempo de `dashDuration`.
   - Al finalizar, coloca al jugador exactamente en `targetPos`.
   - Luego, espera el tiempo de enfriamiento (`dashCooldown`) antes de volver a permitir otro dash.

6. Resumen del comportamiento
   - El personaje se mueve en 8 direcciones (usando WASD).
   - Puede rodar (dash) presionando **ESPACIO** en la dirección actual o en la última dirección usada.
   - No puede moverse ni hacer otro dash durante el rodar.
   - El sprite gira automáticamente según la dirección horizontal.

Explicación de las funciones clave

1. IEnumerator
Es un tipo especial de método que permite ejecutar su contenido de manera gradual, en lugar de todo de golpe.
En Unity se usa para crear corrutinas (coroutines), las cuales permiten hacer acciones que toman tiempo (como animaciones, esperas o movimientos suaves) sin congelar el juego.
En este código, IEnumerator Dash() se usa para que el dash ocurra durante un corto periodo y no de forma instantánea.

Ejemplo simple:

private IEnumerator Esperar()
{
    Debug.Log("Inicio");
    yield return new WaitForSeconds(2f);
    Debug.Log("Pasaron 2 segundos");
}

Esto imprime el segundo mensaje dos segundos después, pero el juego sigue corriendo normal.

2. yield
La palabra clave yield indica un punto de pausa dentro de una corrutina.
Le dice a Unity que detenga temporalmente el método y continúe después, según el tipo de yield que se use.

Tipos comunes:

yield return null; → espera un frame (un instante antes de seguir).

yield return new WaitForSeconds(x); → espera x segundos.

yield break; → termina la corrutina.

En este código, yield return null; se usa dentro del while para que el movimiento del dash se actualice cada frame, logrando una transición fluida.

3. Vector3.Lerp()
Lerp significa Interpolación Lineal (Linear Interpolation).
Sirve para obtener una posición entre dos puntos (inicio y fin), según un valor de progreso entre 0 y 1.

Si t = 0 → posición inicial.

Si t = 1 → posición final.

Si t = 0.5 → punto medio.

Ejemplo del código:

transform.position = Vector3.Lerp(startPos, targetPos, elapsed / dashDuration);

Esto hace que el jugador se desplace suavemente desde startPos hasta targetPos durante la duración del dash.

4. WaitForSeconds
Es una instrucción que se usa junto con yield para pausar la ejecución durante un tiempo específico.
En este script, se usa para controlar el cooldown del dash, es decir, el tiempo que debe pasar antes de volver a hacerlo.

yield return new WaitForSeconds(dashCooldown);


Después de este tiempo, el jugador puede volver a hacer dash (canDash = true).
